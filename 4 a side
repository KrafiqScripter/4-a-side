local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "4 a side script v" .. Fluent.Version,
    SubTitle = "by Krafiq",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "Please wait..",
        SubContent = "SubContent", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })



    Tabs.Main:AddParagraph({
        Title = "4 a side script",
        Content = "Enjoy using our script!"
    })



    Tabs.Main:AddButton({
        Title = "Score For Home",
        Description = "Click to score for home",
        Callback = function()
            Window:Dialog({
                Title = "Are you sure?",
                Content = "Are you sure to score for home?",
                Buttons = {
                    {
                        Title = "Yes",
                        Callback = function()
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.CSF.CFrame
    wait(0.1)
    local args = {
        [1] = workspace:WaitForChild("CSF")
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("ownershipChange"):FireServer(unpack(args))
    wait(0.1)
    delay_go_air = 1 
    tween_speed = 1 
    current_position = game.Workspace.CSF.Position
    target_position1 = CFrame.new(current_position) * CFrame.new(0, 20, 0) 
    target_position2 = CFrame.new(17, 17, -276) * CFrame.new(0, 20, 0) 
    target_position3 = CFrame.new(17, 17, -276) 
    TweenI = TweenInfo.new(1, Enum.EasingStyle.Linear) 
    local tween1 = game:GetService('TweenService'):Create(game.Workspace.CSF, TweenI, {CFrame = target_position1}) 
    tween1:Play() 
    tween1.Completed:Wait() 
    TweenI = TweenInfo.new(1, Enum.EasingStyle.Linear) 
    local tween2 = game:GetService('TweenService'):Create(game.Workspace.CSF, TweenI, {CFrame = target_position2}) 
    tween2:Play() 
    tween2.Completed:Wait() 
    local tween3 = game:GetService('TweenService'):Create(game.Workspace.CSF, TweenI, {CFrame = target_position3}) 
    tween3:Play() 
    tween3.Completed:Wait()
                        end
                    },
                    {
                        Title = "No",
                        Callback = function()
                            
                        end
                    }
                }
            })
        end
    })

    Tabs.Main:AddButton({
        Title = "Score For Away",
        Description = "click to score for away",
        Callback = function()
            Window:Dialog({
                Title = "Are you sure?",
                Content = "Are you sure to score for away?",
                Buttons = {
                    {
                        Title = "Yes",
                        Callback = function()
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.CSF.CFrame
    wait(0.1)
    local args = {
        [1] = workspace:WaitForChild("CSF")
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("ownershipChange"):FireServer(unpack(args))
    wait(0.1)
    delay_go_air = 1 
    tween_speed = 1 
    current_position = game.Workspace.CSF.Position 
    target_position1 = CFrame.new(current_position) * CFrame.new(0, 20, 0) 
    target_position2 = CFrame.new(18, 17, 270) * CFrame.new(0, 20, 0) 
    target_position3 = CFrame.new(18, 17, 270) 
    TweenI = TweenInfo.new(1, Enum.EasingStyle.Linear) 
    local tween1 = game:GetService('TweenService'):Create(game.workspace.CSF, TweenI, {CFrame = target_position1}) 
    tween1:Play() 
    tween1.Completed:Wait() 
    TweenI = TweenInfo.new(1, Enum.EasingStyle.Linear) 
    local tween2 = game:GetService('TweenService'):Create(game.workspace.CSF, TweenI, {CFrame = target_position2}) 
    tween2:Play() 
    tween2.Completed:Wait() 
    local tween3 = game:GetService('TweenService'):Create(game.workspace.CSF, TweenI, {CFrame = target_position3}) 
    tween3:Play() 
    tween3.Completed:Wait()
                        end
                    },
                    {
                        Title = "No",
                        Callback = function()
                            
                        end
                    }
                }
            })
        end
    })


    Tabs.Main:AddButton({
        Title = "Catch Ball (must be gk)",
        Description = "click to catch ball",
        Callback = function()
            Window:Dialog({
                Title = "Are you sure?",
                Content = "Are you sure to catch ball?",
                Buttons = {
                    {
                        Title = "Yes",
                        Callback = function()
                            game.ReplicatedStorage.Events.CatchBall:FireServer(game.Workspace.CSF)
                        end
                    },
                    {
                        Title = "No",
                        Callback = function()
                            
                        end
                    }
                }
            })
        end
    })

    local Toggle = Tabs.Main:AddToggle("toogle", {Title = "Auto React", Default = false })

    Toggle:OnChanged(function(isToggled)
        if isToggled then
            _G.autoTouch5 = true
            
            while _G.autoTouch5 == true do
                local args = {
                    [1] = workspace:WaitForChild("CSF")
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("ownershipChange"):FireServer(unpack(args))
                wait()
            end
        else
            _G.autoTouch5 = false
        end
    end)
    
    Options.toogle:SetValue(false)


    local Toggle = Tabs.Main:AddToggle("toogle", {Title = "Auto GK Catch (must be gk)", Default = false })

    Toggle:OnChanged(function(isToggled)
        if isToggled then
            _G.autoTouch6 = true
            
            while _G.autoTouch6 == true do
                game.ReplicatedStorage.Events.CatchBall:FireServer(game.Workspace.CSF)
            end
        else
            _G.autoTouch6 = false
        end
    end)
    
    Options.toogle:SetValue(false)


    
    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "Speed",
        Description = "Change Your Speed",
        Default = 20,
        Min = 0,
        Max = 200,
        Rounding = 1,
        Callback = function(Value)
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end
    })

    Slider:OnChanged(function(Value)
        
    end)

    Slider:SetValue(20)


    Tabs.Main:AddButton({
        Title = "Teleport to Ball",
        Description = "click to teleport to ball",
        Callback = function()
            Window:Dialog({
                Title = "Are you sure?",
                Content = "Are you sure to teleport to ball?",
                Buttons = {
                    {
                        Title = "Yes",
                        Callback = function()
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.CSF.CFrame
                        end
                    },
                    {
                        Title = "No",
                        Callback = function()
                            
                        end
                    }
                }
            })
        end
    })










    local Keybind = Tabs.Main:AddKeybind("Keybind", {
        Title = "KeyBind",
        Mode = "Toggle", -- Always, Toggle, Hold
        Default = "LeftControl", -- String as the name of the keybind (MB1, MB2 for mouse buttons)

        -- Occurs when the keybind is clicked, Value is `true`/`false`
        Callback = function(Value)
            print("Keybind clicked!", Value)
        end,

        -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
        ChangedCallback = function(New)
            print("Keybind changed!", New)
        end
    })

    -- OnClick is only fired when you press the keybind and the mode is Toggle
    -- Otherwise, you will have to use Keybind:GetState()
    Keybind:OnClick(function()
        print("Keybind clicked:", Keybind:GetState())
    end)

    Keybind:OnChanged(function()
        print("Keybind changed:", Keybind.Value)
    end)

    task.spawn(function()
        while true do
            wait(1)

            -- example for checking if a keybind is being pressed
            local state = Keybind:GetState()
            if state then
                print("Keybind is being held down")
            end

            if Fluent.Unloaded then break end
        end
    end)

    Keybind:SetValue("MB2", "Toggle") -- Sets keybind to MB2, mode to Hold


    local Input = Tabs.Main:AddInput("Input", {
        Title = "Input",
        Default = "Default",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            print("Input changed:", Value)
        end
    })

    Input:OnChanged(function()
        print("Input updated:", Input.Value)
    end)
end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
